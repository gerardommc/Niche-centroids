return(m)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'Longitud'], x[, 'Latitud'], window = win, check = F)
})
nlayers(pca.spp)
pca.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim.pca.r, mask = x1)
return(m)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
plot(bio.im.list[[1]][[1]])
plot(bio.im.list[[2]][[1]])
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'Longitud'], x[, 'Latitud'], window = win, check = F)
})
##Computing quadrat counts to smooth
quads <- ppp(clim.points$x, clim.points$y, window = win)
clim.points <- na.omit(data.frame(rasterToPoints(clim)))
clim.vars <- clim.points[, 3:ncol(clim.points)]
clim.pca <- princomp(clim.vars)
clim.pca.vals <- predict(clim.pca)
clim.pca.points <- data.frame(clim.points[, 1:2], clim.pca.vals)
clim.pca.r <- rasterFromXYZ(clim.pca.points[, 1:5])
for(i in 1:3)writeRaster(clim.pca.r[[i]], paste0("Real-spp/Climate/PCA/Comp-", i, "-NAD83"), "GTiff")
proj4string(clim.pca.r) <- CRS("+init=epsg:4269")
for(i in 1:3)writeRaster(clim.pca.r[[i]], paste0("Real-spp/Climate/PCA/Comp-", i, "-NAD83"), "GTiff")
## Load spp data and format
spp <- lapply(paste0("Real-spp/Presence/", c("cal_cal_", "cal_mel_"), "train.csv"), function(x){
require(rgdal)
x1 <- read.csv(x)[, 2:3]
coordinates(x1) <- c("Longitud", "Latitud")
proj4string(x1) <- CRS("+init=epsg:4326")
x2 <- spTransform(x1, CRS = CRS("+init=epsg:4269"))
x3 <- data.frame(coordinates(x2))
return(x3)
})
names(spp) <- c("Cal-cal", "Cal-mel")
spp.buffers <- lapply(spp, function(x){
require(rgdal); require(rgeos)
coordinates(x) <- c("Longitud", "Latitud")
buf <- rgeos::gBuffer(x, width = 2.5, byid = F)
return(buf)
})
## Coercing raster package data to spatstat
win <- winFromRaster(clim[[1]])
## Cropping climate
clim.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim, mask = x1)
return(m)
})
pca.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim.pca.r, mask = x1)
return(m)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'Longitud'], x[, 'Latitud'], window = win, check = F)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
pca.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim.pca.r, mask = x1)
return(m)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'Longitud'], x[, 'Latitud'], window = win, check = F)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(1:2, function(x){
ppp(spp[[x]][, 'Longitud'], spp[[x]][, 'Latitud'], window = win[[x]], check = F)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
clim.spp.points <- lapply(clim.spp, function(x){
data.frame(rasterToPoints(x))
})
##Computing quadrat counts to smooth
quads <- list(
ppp(clim.spp[[1]]$x, clim.spp[[1]]$y, window = win[[1]]),
ppp(clim.spp[[2]]$x, clim.spp[[2]]$y, window = win[[2]])
)
##Computing quadrat counts to smooth
quads <- list(
ppp(clim.spp.points[[1]]$x, clim.spp.points[[1]]$y, window = win[[1]]),
ppp(clim.spp.points[[2]]$x, clim.spp.points[[2]]$y, window = win[[2]])
)
Q <- foreach(i = seq_along(spp)) %do% {
quadscheme(data = spp.ppp[[i]], dummy = quads[[i]], method = "grid",
ntile = c(259, 208), npix = c(259, 208))
}
Q <- list(
quadscheme(data = spp.ppp[[1]], dummy = quads[[1]], method = "grid",
ntile = c(259, 208), npix = c(259, 208)),
quadscheme(data = spp.ppp[[2]], dummy = quads[[2]], method = "grid",
ntile = c(259, 208), npix = c(259, 208))
)
plot(quads[[1]])
plot(bio.im.list[[1]][[1]])
points(spp[[1]])
points(spp.ppp[[1]])
plot(bio.im.list[[1]][[1]])
points(spp.ppp[[1]])
plot(bio.im.list[[2]][[1]])
points(spp.ppp[[2]])
spp.buffers <- lapply(spp, function(x){
require(rgdal); require(rgeos)
coordinates(x) <- c("Longitud", "Latitud")
buf <- rgeos::gBuffer(x, width = 5, byid = F)
return(buf)
})
## Cropping climate
clim.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim, mask = x1)
return(m)
})
clim.spp.points <- lapply(clim.spp, function(x){
data.frame(rasterToPoints(x))
})
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
pca.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim.pca.r, mask = x1)
return(m)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(1:2, function(x){
ppp(spp[[x]][, 'Longitud'], spp[[x]][, 'Latitud'], window = win[[x]], check = F)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
##Computing quadrat counts to smooth
quads <- list(
ppp(clim.spp.points[[1]]$x, clim.spp.points[[1]]$y, window = win[[1]]),
ppp(clim.spp.points[[2]]$x, clim.spp.points[[2]]$y, window = win[[2]])
)
Q <- list(
quadscheme(data = spp.ppp[[1]], dummy = quads[[1]], method = "grid",
ntile = c(259, 208), npix = c(259, 208)),
quadscheme(data = spp.ppp[[2]], dummy = quads[[2]], method = "grid",
ntile = c(259, 208), npix = c(259, 208))
)
dim(bio.im.list[[1]][[1]])
dim(bio.im.list[[2]][[1]])
Q <- list(
quadscheme(data = spp.ppp[[1]], dummy = quads[[1]], method = "grid",
ntile = c(116, 169), npix = c(116, 169)),
quadscheme(data = spp.ppp[[2]], dummy = quads[[2]], method = "grid",
ntile = c(178, 194), npix = c(178, 194))
)
bio.im.list[[1]][[1]]$xstep
bio.im.list[[1]][[1]]$xcol
length(bio.im.list[[1]][[1]]$xcol)
length(bio.im.list[[1]][[1]]$ycol)
length(bio.im.list[[1]][[1]]$yrow)
dim(clim.spp[[1]])
## Cropping climate
clim.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim, mask = x1)
m <- crop(m, extent(x))
return(m)
})
clim.spp.points <- lapply(clim.spp, function(x){
data.frame(rasterToPoints(x))
})
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
dim(clim.spp[[1]])
plot(clim.spp[[1]][[1]])
plot(spp.buffers[[1]])
plot(clim.spp[[1]][[1]])
plot(spp.buffers[[1]], add = T)
## Cropping climate
clim.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim, mask = x1)
m.df <- na.omit(rasterToPoints(m))
m <- rasterFromXYZ(m.df)
return(m)
})
clim.spp.points <- lapply(clim.spp, function(x){
data.frame(rasterToPoints(x))
})
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
dim(clim.spp[[1]][[1]])
plot(clim.spp[[1]][[1]])
plot(spp.buffers[[1]], ass = T)
plot(spp.buffers[[1]], add = T)
clim.spp.points <- lapply(clim.spp, function(x){
data.frame(rasterToPoints(x))
})
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
pca.spp <- lapply(spp.buffers, function(x1){
m <- mask(x = clim.pca.r, mask = x1)
m.df <- na.omit(rasterToPoints(m))
m <- rasterFromXYZ(m.df)
return(m)
})
## transforming species points to a planar point pattern
spp.ppp <- lapply(1:2, function(x){
ppp(spp[[x]][, 'Longitud'], spp[[x]][, 'Latitud'], window = win[[x]], check = F)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
##Computing quadrat counts to smooth
quads <- list(
ppp(clim.spp.points[[1]]$x, clim.spp.points[[1]]$y, window = win[[1]]),
ppp(clim.spp.points[[2]]$x, clim.spp.points[[2]]$y, window = win[[2]])
)
dim(bio.im.list[[1]][[1]])
dim(pca.im.list[[1]][[1]])
dim(pca.im.list[[2]][[1]])
##Working windows
win <- list(
winFromRaster(raster(clim.spp[[1]][[1]])),
winFromRaster(raster(clim.spp[[2]][[1]]))
)
## transforming species points to a planar point pattern
spp.ppp <- lapply(1:2, function(x){
ppp(spp[[x]][, 'Longitud'], spp[[x]][, 'Latitud'], window = win[[x]], check = F)
})
## Transforming species' layers to spatstat images
pca.im.list <- lapply(pca.spp, imFromStack)
bio.im.list <- lapply(clim.spp, imFromStack)
##Computing quadrat counts to smooth
quads <- list(
ppp(clim.spp.points[[1]]$x, clim.spp.points[[1]]$y, window = win[[1]]),
ppp(clim.spp.points[[2]]$x, clim.spp.points[[2]]$y, window = win[[2]])
)
Q <- list(
quadscheme(data = spp.ppp[[1]], dummy = quads[[1]], method = "grid",
ntile = c(116, 168), npix = c(116, 168)),
quadscheme(data = spp.ppp[[2]], dummy = quads[[2]], method = "grid",
ntile = c(178, 194), npix = c(178, 194))
)
b0 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.5))})
b1 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.25))})
b2 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.2))})
b3 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.1))})
Z0 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b0[[i]], labels = 1:2)}
Z1 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b1[[i]], labels = 1:4)}
Z2 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b2[[i]], labels = 1:5)}
Z3 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b3[[i]], labels = 1:10)}
##Exploratory analysis
Z <- pca.im.list[[1]]
b0 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.5))})
b1 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.25))})
b2 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.2))})
b3 <- lapply(Z, function(x){quantile(x, probs = seq(0, 1, by = 0.1))})
Z0 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b0[[i]], labels = 1:2)}
Z1 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b1[[i]], labels = 1:4)}
Z2 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b2[[i]], labels = 1:5)}
Z3 <- foreach(i = seq_along(Z)) %do% {cut(Z[[i]], breaks = b3[[i]], labels = 1:10)}
names(Z0) <- paste0("T0.", names(Z))
names(Z1) <- paste0("T1.", names(Z))
names(Z2) <- paste0("T2.", names(Z))
names(Z3) <- paste0("T3.", names(Z))
par(mfrow = c(1,3))
for(i in 1:2){
plot(tess(image = Z0[[i]]), main = names(spp)[i])
points(spp.ppp[[i]], pch = "+", col = "green", cex = 1.5)
plot(tess(image = Z1[[i]]))
points(spp.ppp[[i]], pch = "+", col = "green", cex = 1.5)
plot(Z[[i]])
points(spp.ppp[[i]], pch = "+", col = "green", cex = 1.5)
}
j = 1
Z.bio <- bio.im.list[[j]]
cuts <- seq(0, 1, by = 0.1)
quants <- lapply(Z.bio, function(x){quantile(x, probs = cuts, labels = 1:(length(cuts)-1))})
quants
length(quants)
V <- lapply(bio.cut, function(x)tess(image = x))
length(V)
counts <- foreach(k = seq_along(V)) %do% {
quadratcount(Q[[j]]$data, tess = V[[k]])
}
pdf(c("Cal-cal.pdf", "Cal-mel.pdf")[j], width = 15, height = 5)
par(mfrow = c(1,3))
for(i in 1:19){
plot(counts[[j]][[i]], main = paste(c("Callipepla californica",
"Calamospiza melanocorys")[j], names(Q)[1], names(clim)[i], sep = ", "))
plot(V[[i]], main = "")
points(spp.ppp[[j]], pch = "+", col = "green", cex = 2)
plot(rhohat(Q[[j]]$data, Z.bio[[i]]) , main = "")
}
dev.off()
length(counts)
pdf(c("Cal-cal.pdf", "Cal-mel.pdf")[j], width = 15, height = 5)
par(mfrow = c(1,3))
for(i in 1:19){
plot(counts[[i]], main = paste(c("Callipepla californica",
"Calamospiza melanocorys")[j], names(clim)[i], sep = ", "))
plot(V[[i]], main = "")
points(spp.ppp[[j]], pch = "+", col = "green", cex = 2)
plot(rhohat(Q[[j]]$data, Z.bio[[i]]) , main = "")
}
dev.off()
for(j in 1:2){
Z.bio <- bio.im.list[[j]]
cuts <- seq(0, 1, by = 0.1)
quants <- lapply(Z.bio, function(x){quantile(x, probs = cuts, labels = 1:(length(cuts)-1))})
bio.cut <- foreach(k = seq_along(Z.bio)) %do% {
cut(Z.bio[[k]], breaks = quants[[k]], labels = 1:(length(cuts)-1))
}
V <- lapply(bio.cut, function(x)tess(image = x))
counts <- foreach(k = seq_along(V)) %do% {
quadratcount(Q[[j]]$data, tess = V[[k]])
}
pdf(c("Cal-cal.pdf", "Cal-mel.pdf")[j], width = 15, height = 5)
par(mfrow = c(1,3))
for(i in 1:19){
plot(counts[[i]], main = paste(c("Callipepla californica",
"Calamospiza melanocorys")[j], names(clim)[i], sep = ", "))
plot(V[[i]], main = "")
points(spp.ppp[[j]], pch = "+", col = "green", cex = 2)
plot(rhohat(Q[[j]]$data, Z.bio[[i]]) , main = "")
}
dev.off()
}
pdf("Pairs-Cal-cal.pdf", width = 20, height = 20)
pairs(clim.spp[[1]])
dev.off()
png("Pairs-Cal-cal.png", width = 4000, height = 4000)
pairs(clim.spp[[1]])
dev.off()
png("Pairs-Cal-cal.png", width = 2000, height = 2000)
pairs(clim.spp[[1]])
dev.off()
png("Pairs-Cal-mel.png", width = 2000, height = 2000)
pairs(clim.spp[[2]])
dev.off()
## Ajuste de modelo
cal.cal.ppms <- foreach(i = seq_along(cal.cal.formulas))%do% {
ppm(spp.ppp[[1]],
trend = formula(cal.cal.formulas[i]),
covariates = bio.im.list[[1]])
}
cal.cal.formulas <- c("~ bio1 + bio8 + bio19 + I(bio1^2) + I(bio8^2) + I(bio19^2)",
"~ bio1 + bio8 + bio12 + I(bio1^2) + I(bio8^2) + I(bio12^2)",
"~ bio5 + bio8 + bio12 + I(bio2^2) + I(bio8^2) + I(bio12^2)",
"~ bio8 + bio11 + bio12 + I(bio8^2) + I(bio11^2) + I(bio12^2)")
cal.mel.formulas <- c("~ bio4 + bio5 + bio10 + bio16 + I(bio4^2) + I(bio5^2) + I(bio10^2) + I(bio16^2)",
"~ bio5 + bio7 + bio16 + I(bio5^2) + I(bio7^2) + I(bio16^2)")
## Ajuste de modelo
cal.cal.ppms <- foreach(i = seq_along(cal.cal.formulas))%do% {
ppm(spp.ppp[[1]],
trend = formula(cal.cal.formulas[i]),
covariates = bio.im.list[[1]])
}
cal.mel.ppms <- foreach(i = seq_along(cal.mel.formulas))%do% {
ppm(spp.ppp[[2]],
trend = formula(cal.mel.formulas[i]),
covariates = bio.im.list[[2]])
}
lapply(cal.cal.ppms, AIC)
cal.cal.aic <- sapply(cal.cal.ppms, AIC)
cal.mel.aic <- sapply(cal.mel.ppms, AIC)
cal.mel.aic
summary(cal.cal.ppms[[which.min(cal.cal.aic)]])
summary(cal.mel.ppms[[which.min(cal.cal.aic)]])
summary(cal.mel.ppms[[which.min(cal.mel.aic)]])
cal.mel.formulas <- c("~ bio4 + bio5 + bio10 + bio16 + I(bio4^2) + I(bio5^2) + I(bio10^2) + I(bio16^2)",
"~ bio4 + bio5 + bio10 + I(bio4^2) + I(bio5^2) + I(bio10^2)",
"~ bio4 + bio5 + bio16 + I(bio4^2) + I(bio5^2) + I(bio16^2)",
"~ bio4 + bio10 + bio16 + I(bio4^2) + I(bio10^2) + I(bio16^2)",
"~ bio5 + bio10 + bio16 + I(bio5^2) + I(bio10^) + I(bio16^2)",
"~ bio5 + bio7 + bio16 + I(bio5^2) + I(bio7^2) + I(bio16^2)",
"~ bio1 + bio4 + bio16 + I(bio1^2) + I(bio4^2) + I(bio16^2)",
"~ bio1 + bio4 + bio13 + I(bio1^2) + I(bio4^2) + I(bio13^2)",
"~ bio1 + bio4 + bio5 + bio13 + I(bio1^2) + I(bio4^2) + I(bio5^2) + I(bio13^2)",
"~ bio4 + bio5 + bio13 + I(bio4^2) + I(bio5^2) + I(bio13^2)"
)
cal.mel.ppms <- foreach(i = seq_along(cal.mel.formulas))%do% {
ppm(spp.ppp[[2]],
trend = formula(cal.mel.formulas[i]),
covariates = bio.im.list[[2]])
}
cal.cal.aic <- sapply(cal.cal.ppms, AIC)
cal.mel.aic <- sapply(cal.mel.ppms, AIC)
summary(cal.mel.ppms[[which.min(cal.mel.aic)]])
cal.mel.aic
seq_along(cal.cal.formulas)
seq_along(cal.mel.formulas)
cal.mel.ppms <- foreach(i = seq_along(cal.mel.formulas))%do% {
ppm(spp.ppp[[2]],
trend = formula(cal.mel.formulas[i]),
covariates = bio.im.list[[2]])
}
cal.mel.aic <- sapply(cal.mel.ppms, AIC)
cal.mel.aic
cal.mel.formulas <- c("~ bio4 + bio5 + bio10 + bio16 + I(bio4^2) + I(bio5^2) + I(bio10^2) + I(bio16^2)",
"~ bio4 + bio5 + bio10 + I(bio4^2) + I(bio5^2) + I(bio10^2)",
"~ bio4 + bio5 + bio16 + I(bio4^2) + I(bio5^2) + I(bio16^2)",
"~ bio4 + bio10 + bio16 + I(bio4^2) + I(bio10^2) + I(bio16^2)",
"~ bio5 + bio10 + bio16 + I(bio5^2) + I(bio10^2) + I(bio16^2)",
"~ bio5 + bio7 + bio16 + I(bio5^2) + I(bio7^2) + I(bio16^2)",
"~ bio1 + bio4 + bio16 + I(bio1^2) + I(bio4^2) + I(bio16^2)",
"~ bio1 + bio4 + bio13 + I(bio1^2) + I(bio4^2) + I(bio13^2)",
"~ bio1 + bio4 + bio5 + bio13 + I(bio1^2) + I(bio4^2) + I(bio5^2) + I(bio13^2)",
"~ bio4 + bio5 + bio13 + I(bio4^2) + I(bio5^2) + I(bio13^2)"
)
cal.mel.ppms <- foreach(i = seq_along(cal.mel.formulas))%do% {
ppm(spp.ppp[[2]],
trend = formula(cal.mel.formulas[i]),
covariates = bio.im.list[[2]])
}
cal.mel.aic <- sapply(cal.mel.ppms, AIC)
cal.mel.aic
summary(cal.mel.ppms[[which.min(cal.mel.aic)]])
cal.mel.aic <- sapply(cal.mel.ppms, AIC)[-1]
summary(cal.mel.ppms[[which.min(cal.mel.aic)]])
lapply(cal.mel.ppms, summary)
which.min(cal.cal.aic)
cal.mel.aic[5]
cal.mel.aic[6]
cal.mel.aic
summary(cal.mel.ppms[[2]])
cal.cal.best <- cal.cal.ppms[[which.min(cal.cal.aic)]]
cal.mel.best <- cal.mel.ppms[[6]]
diagnose.ppm(cal.cal.best)
diagnose.ppm(cal.mel.best)
cal.cal.pred <- predict(cal.cal.best, type = "trend", dimyx = c(116, 168))
cal.cal.pred <- predict(cal.cal.best, type = "trend", dimyx = c(116, 168))
cal.mel.pred <- predict(cal.cal.best, type = "trend", dimyx = c(178, 194))
plot(cal.cal.pred)
plot(cal.mel.pred)
cal.mel.pred <- predict(cal.mel.best, type = "trend", dimyx = c(178, 194))
plot(cal.mel.pred)
par(mfrow = c(1,1))
plot(cal.mel.pred)
par(mfrow = c(1,1))
plot(cal.mel.pred)
plot(cal.cal.pred)
plot(cal.mel.pred)
residuals(cal.mel.best)
plot(residuals(cal.mel.best))
diagnose.ppm(cal.mel.best)
diagnose.ppm(cal.cal.best)
cal.cal.step <- step(cal.cal.best)
formula(cal.cal.best)
cal.cal.step <- step(cal.mel.best)
cal.mel.best <- cal.mel.ppms[[6]]
cal.mel.best
cal.mel.step <- step(cal.mel.best)
formula(cal.mel.step)
cal.mel.step <- step(cal.mel.best)
png("Real-spp/Diag-cal-cal.png", width = 1000, height = 1000)
diagnose.ppm(cal.cal.best)
dev.off()
png("Real-spp/Diag-cal-mel.png", width = 1000, height = 1000)
diagnose.ppm(cal.mel.best)
dev.off()
plot(cal.cal.best)
plot(cal.mel.best)
png("Real-spp/Diag-cal-cal.png", width = 1000, height = 1000)
diagnose.ppm(cal.cal.best)
dev.off()
png("Real-spp/Diag-cal-mel.png", width = 1000, height = 1000)
diagnose.ppm(cal.mel.best)
dev.off()
dg <- diagnose.ppm(cal.cal.best)
dg
cal.cal.pred.r <- raster(cal.cal.pred)
cal.mel.pred.r <- raster(cal.mel.pred)
dir.create("Real-spp/Predictions")
cal.cal.pred <- predict(cal.cal.best, type = "intensity", dimyx = c(116, 168))
cal.mel.pred <- predict(cal.mel.best, type = "intensity", dimyx = c(178, 194))
plot(cal.cal.pred)
cal.cal.pred <- predict(cal.cal.best, type = "trend", dimyx = c(116, 168))
plot(cal.cal.pred)
cal.cal.pred <- predict(cal.cal.best, type = "intensity", dimyx = c(116, 168))
cal.mel.pred <- predict(cal.mel.best, type = "intensity", dimyx = c(178, 194))
cal.cal.pred.r <- raster(cal.cal.pred)
cal.mel.pred.r <- raster(cal.mel.pred)
writeRaster(cal.cal.pred.r, "Real-spp/Predictions/Callipepla-californica-PPM", "GTiff")
writeRaster(cal.mel.pred.r, "Real-spp/Predictions/Calamospiza-melanocorys-PPM", "GTiff")
dir.create("Real-spp/Predictions")
writeRaster(cal.cal.pred.r, "Real-spp/Predictions/Callipepla-californica-PPM-NAD83", "GTiff")
writeRaster(cal.mel.pred.r, "Real-spp/Predictions/Calamospiza-melanocorys-PPM-NAD83", "GTiff")
