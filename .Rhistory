spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
p.presence <- lapply(mahal.dists, function(x){exp(-x)/(1+exp(-x))})
plot(p.presence[[50]])
p.presence <- lapply(mahal.dists, function(x){exp(-0.1 * x)})
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
plot(p.presence[[50]]); points(spp.points[[50]])
cellStats(mahal.dists[[50]], range)
cellStats(mahal.dists[[50]], max) - cellStats(mahal.dists[[50]], min)
10/(cellStats(mahal.dists[[50]], max) - cellStats(mahal.dists[[50]], min))
p.presence <- lapply(mahal.dists, function(x){
r <- 10/(cellStats(x, max) - cellStats(x, min))
return(exp(-r * x))}
)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:100){
plot(exp(p.presence[[i]])); points(spp.points[[i]])
}
for(i in 1:100){
plot((p.presence[[i]])); points(spp.points[[i]])
}
species.centroids <- lapply(species.layers,
function(x){
q <- sample(c(0.05, 0.95), 3, replace = T)
cent <- sapply(1:3, function(x1){quantile(x[[x1]], q[x1])})
names(cent) <- paste0(names(x), "-", names(cent))
return(cent)
})
species.centroids <- lapply(species.layers,
function(x){
q <- sample(c(0.01, 0.99), 3, replace = T)
q.1 <- sapply(1:3, function(x1){quantile(x[[x1]], q[x1])})
ran <- lapply(1:3, function(x1){range(x[[x1]][])})
cent <- sapply(1:3, function(x1){
if(q[x1] == 0.01){
ce <- min(ran[[x1]]) - abs(min(ran[[x1]]) - q.1[x1])
} else {
ce <- max(ran[[x1]]) + abs(max(ran[[x1]]) - q.1[x1])
}
return(ce)
})
names(cent) <- paste0(names(x), "-", names(cent))
return(cent)
})
spp.cent.cov <- list(centroids = species.centroids,
covariances = species.covariances)
mahal.dists <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))
dist <- mahalanobis(df[, 3:5], center = species.centroids[[x]], cov = species.covariances[[x]])
dist <- round(dist, 3)
r <- rasterFromXYZ(data.frame(df[, c("x", "y")], dist))
return(r)
})
p.presence <- lapply(mahal.dists, function(x){
r <- 10/(cellStats(x, max) - cellStats(x, min))
return(exp(-r * x))}
)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = exp(x), n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:100){
plot((p.presence[[i]])); points(spp.points[[i]])
}
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:100){
plot((p.presence[[i]])); points(spp.points[[i]])
}
p.presence <- lapply(mahal.dists, function(x){
r <- 1/(cellStats(x, max) - cellStats(x, min))
return(exp(-r * x))}
)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:100){
plot((p.presence[[i]])); points(spp.points[[i]])
}
library(raster); library(ntbox); library(doParallel)
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
mahal.dists <- readRDS("Simulated-species/Mahal-dists-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
ppm.mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
return(ppm.mod)
})
dir.create("../Resultados/Analysis-centroids/Fitted-PPMs")
for(i in seq_along(spp.ppms)){
saveRDS(spp.ppms[[i]], paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", i, ".rds"))
}
install.packages("ppmlasso")
library(raster); library(doParallel); library(spatstat); library(ppmlasso)
library(raster); library(doParallel); library(spatstat); library(ppmlasso)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-RandomCentroids.rds")
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
i = 1
ppm.mod <-ppmlasso(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
ppm.mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
return(ppm.mod)
})
warnings()
dir.create("../Resultados/Analysis-centroids/Fitted-Random-PPMs")
for(i in seq_along(spp.ppms)){
saveRDS(spp.ppms[[i]], paste0("../Resultados/Analysis-centroids/Fitted-Random-PPMs/PPM-", i, ".rds"))
}
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-EdgeCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-EdgeCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-EdgeCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-EdgeCentroids.rds")
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
ppm.mod <- step(mod)
return(ppm.mod)
})
warnings()
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
### Formatting data for spatstat
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
ppm.mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
coef <- coefficients(ppm.mod)
rast <- raster(predict(ppm.mod, type = "trend", ngrid = c(100, 100)))
return(list(pred = rast,
coef = coef))
})
dir.create("../Resultados/Analysis-centroids/Fitted-PPMs")
for(i in seq_along(spp.ppms)){
saveRDS(spp.ppms[[i]], paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", i, ".rds"))
}
warnings()
gc(reset = T)
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", x, ".rds"))
})
names(spp.ppms[[1]])
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM")
write.csv(df.results, "Simulated-species/Results-PPMs.csv", row.names = F)
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-EdgeCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-EdgeCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-EdgeCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-EdgeCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Edge-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
centroids[[1]]
sapply(x, function(x){length(x$coef)})
sapply(spp.ppms, function(x){length(x$coef)})
lapply(spp.ppms, function(x){names(x[[1]])})
lapply(spp.ppms, function(x){names(x[[2]])})
dim.names
dim.names <- sapply(spp.ppms, function(x){names(x[[2]][1])})
which(dim.names != "(Intercept)")
lens <- sapply(spp.ppms, function(x){length(x$coefs)})
length(which(lens == 7))
lens
lens <- sapply(spp.ppms, function(x){length(x$coefs)})
lens <- sapply(spp.ppms, function(x){length(x$coef)})
length(which(lens == 7))
library(raster); library(doParallel); library(spatstat)
length(which(lens == 7))
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-OuterCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-OuterCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-OuterCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-OuterCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Outer-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
if(length(x$coef)==7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
} else {
centroid <- c(NA, NA, NA)
}
})
which(!is.na(centroids))
length(which(!is.na(centroids)))
length(sapply(centroids, function(x){length(is.na(x)) > 0}))
centroids[[1]]
centroids[[2]]
centroids[[3]]
nas <- sapply(centroids, function(x){any(is.na(x))})
length(which(nas))
table(nas)
which(nas)
cnetroids[[2]]
centroids[[2]]
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
dist.true.cents
knitr::opts_chunk$set(echo = TRUE)
list.files("Simulated-species/", "PPMs", full.names = T)
list.files("Simulated-species", "ellipses", full.names = T)
list.files("Simulated-species", "ellipses", full.names = T)
list.files("Simulated-species", "llipses", full.names = T)
list.files("Simulated-species", "PPMs", full.names = T)
list.files("Simulated-species", "PPMs", full.names = T)
list.files("Simulated-species", "llipses", full.names = T)
library(ggplot2); library(data.table)
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips, mod.ellips)
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach") +
facet_wrap(facets = "centr.conf")
names(all.results)
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent))) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent))) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent))) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent)), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_wrap(facets = "centr.conf")
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent))) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent)), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_wrap(facets = "centr.conf")
