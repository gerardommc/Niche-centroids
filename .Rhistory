comp.bimod <- foreach(k = 1:ncol(config[[1]]$layers), .combine = c) %do% {
b <- bimod[c(which(1:nlayers(all.layers) %in% config[[1]]$layers[, k]))]
sum(sapply(b, function(x){x$statistic}))
}
comp.bimod.norm <- foreach(k = 1:ncol(config[[1]]$layers), .combine = c) %do% {
b <- bimod.norm[c(which(1:nlayers(all.layers.norm) %in% config[[1]]$layers[, k]))]
sum(sapply(b, function(x){x$statistic}))
}
pres <- lapply(paste0("Simulated-species/Species-presences",
c(".rds",
"-EdgeCentroids.rds",
"-OuterCentroids.rds",
"-RandomCentroids.rds")), readRDS)
#Skewness analyses
registerDoParallel(cores = 4)
s <- seq(1, 10000, by = 4) #Sample of the environment
env.skew <- foreach(i = seq_along(spp.layers), .combine = c) %dopar% {
df <- as.matrix(spp.layers[[i]])[s, ]
res <- MVN::mvn(df, mvnTest = "hz", multivariatePlot = F)$multivariateNormality$HZ
return(res)
}
env.skew.norm <- foreach(i = seq_along(spp.layers.norm), .combine = c) %dopar% {
df <- as.matrix(spp.layers.norm[[i]])[s, ]
res <- MVN::mvn(df, mvnTest = "hz", multivariatePlot = F)$multivariateNormality$HZ
return(res)
}
#Adding the analyses to model data
ppms.sat$Skewness.env <- rep(env.skew, 4)
ppms.sat.norm$Skewness.env <- rep(env.skew.norm, 4)
ppms.step$Skewness.env <- rep(env.skew, 4)
ellips$Skewness.env <-  rep(env.skew, 4)
ellips.norm$Skewness.env <-  rep(env.skew.norm, 4)
ppms.sat$bimod <-rep(comp.bimod, 4)
ppms.sat.norm$bimod <- rep(comp.bimod.norm, 4)
ppms.step$bimod <- rep(comp.bimod, 4)
ellips$bimod <- rep(comp.bimod, 4)
ellips.norm$bimod <- rep(comp.bimod.norm, 4)
dat.skew <- rbind(ppms.sat, ellips)
dat.skew.norm <- rbind(ppms.sat.norm, ellips.norm)
dat.skew.all <- rbind(dat.skew, dat.skew.norm)
dat.skew.ppm <- subset(dat.skew, approach == "PPM-sat")
dat.skew.ellip <- subset(dat.skew, approach == "Ellipses")
dat.skew.sep <- data.frame(
centr.conf = dat.skew.ppm$centr.conf,
corr.ppm = dat.skew.ppm$Corr.surf,
corr.ell = dat.skew.ellip$Corr.surf,
dist.ppm = dat.skew.ppm$Dist.true.cent,
dist.ell = dat.skew.ellip$Dist.true.cent
)
ggplot(dat.skew.sep) + geom_hex(aes(x = corr.ppm, y = corr.ell)) +
facet_grid(cols = vars(centr.conf))
ggplot(dat.skew.sep) + geom_hex(aes(x = log10(dist.ppm), y = log10(dist.ell))) +
facet_grid(cols = vars(centr.conf))
ggplot(dat.skew.sep) + geom_hex(aes(x = log10(dist.ppm), y = corr.ell)) +
facet_grid(cols = vars(centr.conf))
ggplot(dat.skew.sep) + geom_hex(aes(x = corr.ppm, y =log10(dist.ell))) +
facet_grid(cols = vars(centr.conf))
ggplot(dat.skew.sep) + geom_hex(aes(x = log10(dist.ell), y = corr.ell)) +
facet_grid(cols = vars(centr.conf))
library(rgl)
with(dat.skew.sep, plot3d(x = corr.ppm, y = corr.ell, z = log10(dist.ell)))
library(mgcv)
m1 <- gam(log10(dist.ell) ~ s(corr.ppm, corr.ell), data = dat.skew.sep)
new.data <-  expand.grid(corr.ppm = with(dat.skew.sep, seq(min(corr.ppm), max(corr.ppm), len = 25)),
corr.ell = with(dat.skew.sep, seq(min(corr.ell), max(corr.ell), len = 25)))
preds <- predict.gam(m1, newdata = new.data)
z <- matrix(preds, 25, 25)
x <- with(dat.skew.sep, seq(min(corr.ppm), max(corr.ppm), len = 25))
y <- with(dat.skew.sep, seq(min(corr.ell), max(corr.ell), len = 25))
cols <- c("orangered",
"seagreen4",
"pink",
"peachpuff")
rep(cols, each = 2500)
persp3d(x, y, z, col = "grey99", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
material3d(shininess = 0)
persp3d(x, y, z, col = "grey99", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0)
persp3d(x, y, z, col = "grey99", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2)
persp3d(x, y, z, col = "grey99", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2)
persp3d(x, y, z, col = "lightblue", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2)
persp3d(x, y, z, col = "lightblue", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2, front = "fill")
persp3d(x, y, z, col = "lightblue", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 100, lwd = 2, front = "fill")
persp3d(x, y, z, col = "lightblue", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2, front = "fill")
persp3d(x, y, z, col = "lightblue", alpha = 0.5,
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2, front = "fill")
material3d(shininess = 0, lwd = 2, front = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2)
material3d(shininess = 0, lwd = 2, front = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 0)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 100)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, front = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, back = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, back = "fill", front = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, back = NULL, front = "fill")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, back = NULL, front = NULL)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 5, lit = F)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 10, lit = F, )
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
lines3d(x, y, z)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
persp3d(x, y, z, ytpe = "wire", add = T)
persp3d(x, y, z, type = "wire", add = T)
persp3d(x, y, z, type = "wire", add = T, col = "black")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
persp3d(x, y, z, type = "wire", add = T, col = "black")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
persp3d(x, y, z, type = "wire", add = T, col = "black")
plot3d(x, y, z, type = "wire", add = TRUE, col = "black")
plot3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
new.data$preds <- predict.gam(m1, newdata = new.data)
z <- matrix(new.data$preds, 25, 25)
x <- with(dat.skew.sep, seq(min(corr.ppm), max(corr.ppm), len = 25))
y <- with(dat.skew.sep, seq(min(corr.ell), max(corr.ell), len = 25))
with(new.data,
plot3d(corr.ppm, corr.ell, preds, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, ))
with(new.data,
plot3d(corr.ppm, corr.ell, preds, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, type = "l"))
with(new.data,
plot3d(corr.ppm, corr.ell, preds, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, type = "wire"))
with(new.data,
plot3d(corr.ppm, corr.ell, preds, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, type = "wire"))
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, )
wire3d(x, y, z, add = TRUE, col = "black")
wire3d(x, y, z, col = "black")
wire3d(new.data$corr.ppm, new.data$corr.ell, new.data$preds, col = "black")
?wire3d
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
cols <- viridis(4)
cols <- viridis::viridis(4)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black",
specular = "black")
wire3d(pers, col = "black", lit = F)
pers <- persp3d(x, y, z)
wire3d(pers, col = "black", lit = F)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black",
specular = "black")
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
shade3d(pers, col = "black", lit = F)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines", back = "lines",  col = "black", lit = F)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines", back = "lines",  col = "black", lit = F, add = T)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 3,lit = F, add = T)
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 2,lit = F, add = T)
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 2,lit = F, add = T)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 2.5,lit = F, add = T)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
rgl.postscript("../Graphs/Corr-both-vs-distance.pdf", "pdf", )
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 1,lit = F, add = T)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
rgl.postscript("../Graphs/Corr-both-vs-distance.pdf", "pdf", )
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 0.75,lit = F, add = T)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
rgl.postscript("../Graphs/Corr-both-vs-distance.pdf", "pdf", )
persp3d(x, y, z, col = "lightblue",
xlab = "", ylab = "", zlab = "", r = 0.1, cex.axis = 2,
shininess = 50, lwd = 1, lit = F, meshColor = "black")
persp3d(x, y, z, front = "lines",
back = "lines",  col = "black",
lwd = 0.75,lit = F, add = T, smooth = T)
with(dat.skew.sep, rgl.points(x = corr.ppm, y =corr.ell , z = log10(dist.ell), add = T, alpha = 0.5,
col = rep(cols, each = 2500)))
rgl.postscript("../Graphs/Corr-both-vs-distance.pdf", "pdf", )
library(raster)
clim <- stack(paste0("Real-spp/Climate/bio", 1:19, ".tif"))
clim.points <- na.omit(data.frame(rasterToPoints(clim)))
clim.vars <- clim.points[, 3:ncol(clim.points)]
clim.pca <- princomp(clim.vars)
clim.pca.vals <- predict(clim.pca)
clim.pca.points <- data.frame(clim.points[, 1:2], clim.pca.vals)
clim.pca.r <- rasterFromXYZ(clim.pca.points)
spp <- lapply(paste0("Real-spp/Presence/", c("cal_cal_", "cal_mel_"), "train.csv"), read.csv)
## Coercing raster package data to spatstat
ux = sort(unique(clim.pca.points[[1]]$x)) #Extracting unique coordinates
## Coercing raster package data to spatstat
ux = sort(unique(clim.pca.points$x)) #Extracting unique coordinates
uy = sort(unique(clim.pca.points$y))
ux
## Coercing raster package data to spatstat
ux = sort(unique(clim.pca.points$x)) #Extracting unique coordinates
uy = sort(unique(clim.pca.points$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(clim.pca.points$x, ux) #position of every data point
ref.lines = match(clim.pca.points$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
##Load climate data and run PCA
library(spatstat)
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
names(spp[[1]])
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp, function(x){
ppp(x[, 'Latitud'], x[, 'Longitud'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(clim.pca.points, function(x){
require(foreach)
names(x) <- c("x", "y", "Comp_1", "Comp_2", "Comp_3")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(clim.pca.points, function(x){
require(foreach)
names(x) <- c("x", "y", "Comp_1", "Comp_2", "Comp_3")
X <- with(x, cbind(Comp_1, Comp_2, Comp_3))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
names(clim.pca.points)
spp.lay <- list(clim.pca.points[, c("x, y, Comp.1")],
clim.pca.points[, c("x, y, Comp.2")],
clim.pca.points[, c("x, y, Comp.3")])
spp.lay <- list(clim.pca.points[, c("x, y, Comp.1")],
clim.pca.points[, c("x, y, Comp.2")],
clim.pca.points[, c("x, y, Comp.3")])
clim.pca.points[, c("x, y, Comp.1")]
clim.pca.points[, c("x, y, Comp.2")]
spp.lay <- list(clim.pca.points[, c("x", "y", "Comp.1")],
clim.pca.points[, c("x", "y", "Comp.2")],
clim.pca.points[, c("x", "y", "Comp.3")])
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Transforming species' layers to spatstat images
lay.im.list <- foreach(i = 1:ncol(clim.pca.points)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
## Transforming species' layers to spatstat images
lay.im.list <- foreach(i = 3:ncol(clim.pca.points)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = clim.pca.points[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
plot(lay.im.list)
## Transforming species' layers to spatstat images
library(foreach)
lay.im.list <- foreach(i = 3:ncol(clim.pca.points)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = clim.pca.points[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
plot(lay.im.list[[1]])
plot(lay.im.list[[2]])
plot(lay.im.list[[3]])
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
coef <- coefficients(ppm.mod)
rast <- raster(predict(ppm.mod, type = "trend", ngrid = c(100, 100)))
return(list(pred = rast,
coef = coef))
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
coef <- coefficients(ppm.mod)
rast <- raster(predict(ppm.mod, type = "trend", ngrid = c(100, 100)))
return(list(pred = rast,
coef = coef))
})
names(lay.im.list) <- c("a", "b", "c")
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
coef <- coefficients(ppm.mod)
rast <- raster(predict(ppm.mod, type = "trend", ngrid = c(100, 100)))
return(list(pred = rast,
coef = coef))
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
coef <- coefficients(mod)
#rast <- raster(predict(mod, type = "trend", ngrid = c(100, 100)))
return(list(pred = rast,
coef = coef))
})
dim(lay.im.list[[1]])
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
coef <- coefficients(mod)
rast <- raster(predict(mod, type = "trend", ngrid = c(209, 259)))
return(list(pred = rast,
coef = coef))
})
plot(spp.ppm[[1]]$pred)
plot(spp.ppms[[1]]$pred)
plot(spp.ppms[[2]]$pred)
spp.ppms[[1]]$mod
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
coef <- coefficients(mod)
rast <- raster(predict(mod, type = "trend", ngrid = c(209, 259)))
return(list(mod = mod,
pred = rast,
coef = coef))
})
spp.ppms[[1]]$mod
spp.ppms[[2]]$mod
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
s.mod <- step(mod)
coef <- coefficients(mod)
rast <- raster(predict(mod, type = "trend", ngrid = c(209, 259)))
return(list(mod = mod,
pred = rast,
coef = coef))
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = lay.im.list)
s.mod <- step(mod)
coef <- coefficients(mod)
rast <- raster(predict(mod, type = "trend", ngrid = c(209, 259)))
return(list(mod = mod,
s.mod = s.mod,
pred = rast,
coef = coef))
})
spp.ppms[[1]]$s.mod
spp.ppms[[2]]$s.mod
