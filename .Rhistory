corrs <- sapply(cor.tests, function(x){x$estimate})
boxplot(corrs)
par(mfrow = c(1,1))
plot(dist.true.cents, corrs)
centroids[[1]]
spp.cent.cov$centroids[[1]]
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <- effects[1]/(2 * effects[4])
cent.b <- effects[2]/(2 * effects[5])
cent.c <- effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
par(mfrow = c(1,1))
plot(dist.true.cents, corrs)
centroids[[1]]
spp.cent.cov$centroids[[1]]
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <- effects[1]/(2 * effects[4])
cent.b <- effects[2]/(2 * effects[5])
cent.c <- effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <-- effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
par(mfrow = c(1,1))
plot(dist.true.cents, corrs)
centroids[[1]]
spp.cent.cov$centroids[[1]]
model <- lm(corr.estimates ~ dist.true.cents + I(dist.true.cents^2))
boxplot(dist.true.cents)
boxplot(log(dist.true.cents))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface")
corr.dif <- ppms$Corr.surf - ellips$Corr.surf
dist.dif <- ppms$Dist.true.cent - ellips$Dist.true.cent
p.cor <- length(which(corr.dif >0))/length(corr.dif)
p.dif <- length(which(dist.dif > 0))/length(dist.dif)
p.cor/(1-p.cor)
p.dif/(1-p.dif)
ellip.best
ellip.best <- which.max(ellips$Dist.true.cent)
ppm.best <- which.max(ellips$Dist.true.cent)
ellip.worst <- which.min(ellips$Dist.true.cent)
ppm.wors <- which.min(ppms$Dist.true.cent)
ellip.best
ppm.best
ellip.best <- which.max(ellips$Dist.true.cent)
ppm.best <- which.max(ellips$Dist.true.cent)
ellip.worst <- which.min(ellips$Dist.true.cent)
ppm.worst <- which.min(ppms$Dist.true.cent)
ellip.best
ppm.worst
ellip.worst
ppm.worst
names(ellips)
ellips[, names(ellips)[3:6]]
ellips[, names(ellips)[ellip.best,3:6]]
ellips[ellip.best,]
ellips[ellip.worst,]
ppms[ppm.worst, ]
ppms[ellip.worst,]
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ellips$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
ellip.best
ppm.best
ellips[ellip.best,]
ellip.worst
ppm.worst
ellips[ellip.worst,]
ppms[ppm.worst, ]
library(spatstat)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-200.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-340.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-200.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-340.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-200.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-340.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
summary(ppm.worst.mod)
coef(ppm.worst.mod)
coef(ppm.best.mod)
class(layers)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
library(raster)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
nlayers(layers)
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ppms$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
ellip.best
ppm.best
ellips[ellip.best,]
ppms[ppm.best]
ppms[ppm.best, ]
ellip.worst
ppm.worst
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-547.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-200.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
coef(ppm.worst.mod)
coef(ppm.best.mod)
library(raster)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
ellip.worst
config$combinations[, 106]
lay.gen <- dropLayer(layers, which(! 1:100 %in% config$combinations[, 106]))
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[, 106]))
ellip.worst.mod
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[, 106]))
par(mfrow = c(1, 3))
for(i in 1:3){
density(lay.gen.wors[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, 106][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[, 106]))
par(mfrow = c(1, 3))
for(i in 1:3){
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, 106][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[, 106]))
par(mfrow = c(1, 3))
for(i in 1:3){
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, 106][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
ncol(config$combinations)
config$sample
length(config$sample)
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(1, 3))
for(i in 1:3){
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(2, 3))
for(i in 1:3){
plot(lay.gen.worst[[i]])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(2, 3))
for(i in 1:3){
plot(lay.gen.worst[[i]])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
library(raster); library(doParallel); library(spatstat)
saveRDS(config, "Simulated-species/Sim-config-species-list.rds")
library(raster)
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv", stringsAsFactors = F)
total.combinations <- combn(x = 100, m = 3)
s <- sample(1:ncol(total.combinations), 1000)
sample.layers <- config$sample
layer.names <- lapply(1:ncol(sample.layers), function(x){l.sum$Layer.name[sample.layers[, x]]})
total.combinations <- combn(x = 100, m = 3)
layer.names <- lapply(1:ncol(sample.layers), function(x){l.sum$Layer.name[sample.layers[, x]]})
s <- config$sample
s
sample.layers <- total.combinations[, s]
layer.names <- lapply(1:ncol(sample.layers), function(x){l.sum$Layer.name[sample.layers[, x]]})
species.config.list <- list(Readme = "This list containes three other objects \n
1- The total possible number of three layer combinations out of
the 100 simulated layers. \n
2- An index of the random sample of the entire number of combinations and \n
3- The matrix of combinations \n
4- The names of each layer in the combination",
combinations = total.combinations,
sample = s,
layers = sample.layers,
layer.names = layer.names)
dir.create("Simulated-species")
####
species.layers <- lapply(1:ncol(sample.layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% sample.layers[, x])))})
species.centroids <- lapply(1:ncol(sample.layers), function(x){l.sum$means[sample.layers[, x]]})
species.covariances <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))[, 3:5]
return(cov(df))})
spp.cent.cov <- list(centroids = species.centroids,
covariances = species.covariances)
saveRDS(spp.cent.cov, "Simulated-species/Spp-cent-covs.rds")
mahal.dists <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))
dist <- mahalanobis(df[, 3:5], center = species.centroids[[x]], cov = species.covariances[[x]])
dist <- round(dist, 3)
r <- rasterFromXYZ(data.frame(df[, c("x", "y")], dist))
return(r)
})
saveRDS(mahal.dists, "Simulated-species/Mahal-dists-centroids.rds")
p.presence <- lapply(mahal.dists, function(x){exp(x*(-1))/(1 + exp(x*(-1)))})
saveRDS(p.presence, "Simulated-species/P-presence.rds")
library(dismo)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = rpois(1, rnorm(1, mean = 500, sd = 90)), prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
saveRDS(spp.points, "Simulated-species/Species-presences.rds")
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
## Fitting ppms
spp.ppms <- lapply(seq_along(spp.ppp), function(i){
ppm.mod <-ppm(spp.ppp[[i]],
trend = ~ a + b + c +
I(a^2) + I(b^2) + I(c^2),
covariates = spp.lay.im[[i]])
return(ppm.mod)
})
dir.create("../Resultados/Analysis-centroids/Fitted-PPMs")
for(i in seq_along(spp.ppms)){
saveRDS(spp.ppms[[i]], paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", i, ".rds"))
}
library(raster); library(doParallel); library(spatstat)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", x, ".rds"))
})
spp.lay.df <- lapply(spp.layers, function(x){data.frame(rasterToPoints(x))}) #Transform layers to dataframes
spp.point.vals <- lapply(seq_along(spp.layers), function(x){extract(spp.layers[[x]], spp.points[[x]])}) #Extracting values at points
## Coercing raster package data to spatstat
ux = sort(unique(spp.lay.df[[1]]$x)) #Extracting unique coordinates
uy = sort(unique(spp.lay.df[[1]]$y))
nx = length(ux) #length of unique coordinates
ny = length(uy)
ref.cols = match(spp.lay.df[[1]]$x, ux) #position of every data point
ref.lines = match(spp.lay.df[[1]]$y, uy)
vec = rep(NA, max(ref.lines)*max(ref.cols)) # A vector with the length of data points
ref.vec = (ref.cols - 1)*max(ref.lines) + ref.lines
vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
ppm.preds <- lapply(seq_along(spp.ppms), function(x){
raster(predict(spp.ppms[[x]], type = "trend", ngrid = c(100, 100)))
})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
boxplot(corr.estimates)
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM")
write.csv(df.results, "Simulated-species/Results-PPMs.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface")
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
corr.dif <- ppms$Corr.surf - ellips$Corr.surf
dist.dif <- ppms$Dist.true.cent - ellips$Dist.true.cent
p.cor <- length(which(corr.dif >0))/length(corr.dif)
p.dif <- length(which(dist.dif > 0))/length(dist.dif)
p.cor/(1-p.cor)
p.dif/(1-p.dif)
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ppms$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
ellip.best
ppm.best
ellips[ellip.best,]
ppms[ppm.best, ]
ellip.worst
ppm.worst
ellips[ellip.worst,]
ppms[ppm.worst, ]
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-547.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-200.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
ellip.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.worst,".rds"))
coef(ppm.worst.mod)
coef(ppm.best.mod)
library(raster)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[ellip.worst]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[ellip.worst]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,3))
plot(p.pres[[ellip.worst]], main = "Generating surface")
points(occurs[[ellip.worst]])
plot(ellip.worst.mod[[2]]$suitRaster, "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,3))
plot(p.pres[[ellip.worst]], main = "Generating surface")
points(occurs[[ellip.worst]], alpha = 0.3)
plot(ellip.worst.mod[[2]]$suitRaster, "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,2))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(2,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
