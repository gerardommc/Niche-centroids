}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-sat", centr.conf = "edge")
write.csv(df.results, "Simulated-species/Results-EdgeSaturatedPPMs.csv", row.names = F)
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-OuterCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-OuterCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-OuterCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-OuterCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Outer-Saturated-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
## Computing centroids
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
#Calculating the distance to true centroids
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
#Saving results
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-sat", centr.conf = "outer")
write.csv(df.results, "Simulated-species/Results-OuterSaturatedPPMs.csv", row.names = F)
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-EdgeCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-EdgeCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-EdgeCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-EdgeCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Edge-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
## Computing centroids
centroids <- lapply(spp.ppms, function(x){
if(length(x$coef)==7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
} else {
centroid <- c(NA, NA, NA)
}
return(centroid)
})
#Calculating the distance to true centroids
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
#Saving results
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-step", centr.conf = "edge")
write.csv(df.results, "Simulated-species/Results-EdgeSteppedPPMs.csv", row.names = F)
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_grid(~centr.conf)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_grid(~centr.conf) +
theme(axis.text.x = element_text(angle = 60))
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf)
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf) +
theme(axis.text.x = element_text(anlge = 60))
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf) +
theme(axis.text.x = element_text(angle = 60))
lapply(list.files("Simulated-species", "PPMs", full.names = T)
list.files("Simulated-species", "PPMs", full.names = T)
list.files("Simulated-species", "PPMs", full.names = T)
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach") +
facet_wrap(facets = "centr.conf")
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach") +
facet_wrap(facets = "centr.conf")
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-RandomCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Random-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
if(length(x$coeff == 7)){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
return(centroid)
})
centroids
table(sapply(spp.ppms, function(x){length(x$coef)}))
centroids <- lapply(spp.ppms, function(x){
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
return(centroid)
})
table(sapply(spp.ppms, function(x){length(x$coef)}))
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-step", centr.conf = "random")
write.csv(df.results, "Simulated-species/Results-RandomSteppedPPMs.csv", row.names = F)
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Centre-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
## Computing centroids
centroids <- lapply(spp.ppms, function(x){
if(length(x$coef) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
return(centroid)
})
#Calculating the distance to true centroids
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
#Saving results
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-step", centr.conf = "centre")
write.csv(df.results, "Simulated-species/Results-CentreSteppedPPMs.csv", row.names = F)
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_grid(~centr.conf) +
theme(axis.text.x = element_text(angle = 60))
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf) +
theme(axis.text.x = element_text(angle = 60))
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf) +
theme(axis.text.x = element_text(angle = 60))
list.files("Simulated-species", "PPMs", full.names = T)
ppms <- rbindlist(ppms.l)
ppms.l <- lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv)
head(ppms.l[[9]])
head(ppms.l[[8]])
table(is.na(ppms.l[[8]]$Dist.true.cent))
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-RandomCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Random-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
}else{
centroid = c(NA, NA, NA)
return(centroid)
}
})
table(sapply(spp.ppms, function(x){length(x$coef)}))
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-step", centr.conf = "random")
write.csv(df.results, "Simulated-species/Results-RandomSteppedPPMs.csv", row.names = F)
library(ggplot2); library(data.table)
ppms.l <- lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv)
ppms <- rbindlist(ppms.l)
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
table(is.na(ppms.l[[8]]$Dist.true.cent))
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-RandomCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Random-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
}else{
centroid = c(NA, NA, NA)
return(centroid)
}
})
sapply(spp.ppms, function(x){length(x$coef)})
x <- coef[[1]]
x <- spp.ppms[[1]]
x
x <- spp.ppms[[2]]
length(x$coeff) == 7
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
}else{
centroid = c(NA, NA, NA)
return(centroid)
}
length(x$coeff) == 7
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
}else{
centroid = c(NA, NA, NA)
return(centroid)
}
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
centroid
x <- spp.ppms[[2]]
x
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
centroid
x <- spp.ppms[[3]]
x
if(length(x$coeff) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
centroid
length(x$coeff) == 7
x$coef
length(x$coef)
length(x$coeff)
x$coef
class(x$coef)
typeof(x$coef)
length(x$coeff)
length(x$coef)
centroids <- lapply(spp.ppms, function(x){
if(length(x$coef) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
return(centroid)
})
centroids
library(raster); library(doParallel)
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list-RandomCentroids.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.points <- readRDS("Simulated-species/Species-presences-RandomCentroids.rds")
p.spp <- readRDS("Simulated-species/P-presence-RandomCentroids.rds")
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs-RandomCentroids.rds")
spp.ppms <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-Random-Stepped-PPMs/PPM-", x, ".rds"))
})
ppm.preds <- lapply(spp.ppms, function(x){x$pred})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
## Computing centroids
centroids <- lapply(spp.ppms, function(x){
if(length(x$coef) == 7){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
}else{
centroid = c(NA, NA, NA)
}
return(centroid)
})
table(sapply(spp.ppms, function(x){length(x$coef)}))
#Calculating the distance to true centroids
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
#Saving results
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM-step", centr.conf = "random")
write.csv(df.results, "Simulated-species/Results-RandomSteppedPPMs.csv", row.names = F)
library(ggplot2); library(data.table)
ppms <- lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
library(ggplot2); library(data.table)
ppms <- rbindlist(lapply(list.files("Simulated-species", "PPMs", full.names = T), read.csv))
ellips <-  rbindlist(lapply(list.files("Simulated-species", "llipses", full.names = T), read.csv))
#mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface") +
facet_grid(~centr.conf) +
theme(axis.text.x = element_text(angle = 60))
ggplot(all.results) + geom_violin(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.3) +
geom_boxplot(aes(x = approach, y = log10(Dist.true.cent), fill = approach, colour = approach), alpha = 0.5) +
labs(x = "Approach", y = "Distance to true centroid") +
facet_grid(~ centr.conf) +
theme(axis.text.x = element_text(angle = 60))
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach") +
facet_wrap(facets = "centr.conf")
