vec[ref.vec] = 1
data.mask = matrix(vec, max(ref.lines), max(ref.cols), dimnames = list(uy, ux))
win = as.owin(im(data.mask, xcol = ux, yrow = uy)) #Data analysis window
## transforming species points to a planar point pattern
spp.ppp <- lapply(spp.points, function(x){
ppp(x[, 'x'], x[, 'y'], window = win, check = F)
})
## Transforming species' layers to spatstat images
spp.lay.im <- lapply(spp.lay.df, function(x){
require(foreach)
names(x) <- c("x", "y", "a", "b", "c")
X <- with(x, cbind(a, b, c))
lay.im.list <- foreach(i = 1:ncol(X)) %do% {
vec.all = rep(NA, max(ref.lines)*max(ref.cols))
vec.ref = (ref.cols - 1)*max(ref.lines) + ref.lines
vec.all[ref.vec] = X[,i]
lay <- im(matrix(vec.all, max(ref.lines), max(ref.cols),
dimnames = list(uy, ux)), xcol = ux, yrow = uy)
return(lay)
}
names(lay.im.list) <- c("a", "b", "c")
return(lay.im.list)
})
ppm.preds <- lapply(seq_along(spp.ppms), function(x){
raster(predict(spp.ppms[[x]], type = "trend", ngrid = c(100, 100)))
})
cor.ppm.preds <- lapply(1:1000, function(x){cor.test(ppm.preds[[x]][], p.spp[[x]][])})
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
boxplot(corr.estimates)
corr.estimates <- sapply(cor.ppm.preds, function(x){x$estimate})
centroids <- lapply(spp.ppms, function(x){
effects <- x$coef[2:7]
cent.a <- - effects[1]/(2 * effects[4])
cent.b <- - effects[2]/(2 * effects[5])
cent.c <- - effects[3]/(2 * effects[6])
centroid <- c(a = cent.a,
b = cent.b,
c = cent.c)
return(centroid)
})
dist.true.cents <- sapply(seq_along(centroids), function(x){
mahalanobis(centroids[[x]], spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "PPM")
write.csv(df.results, "Simulated-species/Results-PPMs.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
all.results <- rbind(ppms, ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface")
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
corr.dif <- ppms$Corr.surf - ellips$Corr.surf
dist.dif <- ppms$Dist.true.cent - ellips$Dist.true.cent
p.cor <- length(which(corr.dif >0))/length(corr.dif)
p.dif <- length(which(dist.dif > 0))/length(dist.dif)
p.cor/(1-p.cor)
p.dif/(1-p.dif)
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ppms$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
ellip.best
ppm.best
ellips[ellip.best,]
ppms[ppm.best, ]
ellip.worst
ppm.worst
ellips[ellip.worst,]
ppms[ppm.worst, ]
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-547.rds")
ppm.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-340.rds")
ellip.best.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-200.rds")
ellip.worst.mod <- readRDS("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-106.rds")
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
ellip.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.worst,".rds"))
coef(ppm.worst.mod)
coef(ppm.best.mod)
library(raster)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[106]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[106]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[ellip.worst]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[ellip.worst]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,3))
plot(p.pres[[ellip.worst]], main = "Generating surface")
points(occurs[[ellip.worst]])
plot(ellip.worst.mod[[2]]$suitRaster, "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,3))
plot(p.pres[[ellip.worst]], main = "Generating surface")
points(occurs[[ellip.worst]], alpha = 0.3)
plot(ellip.worst.mod[[2]]$suitRaster, "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(1,2))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(2,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
all.results <- rbind(ppms, ellips)
all.ppms <- lapply(list.files("../Resultados/Analysis-centroids/Fitted-PPMs/",".rds", full.names = T), readRDS)
all.ppms[[1]]$coef
all.ppms[[1]]$coef[4:7]
all.ppms[[1]]$coef[5:7]
is.any(all.ppms[[1]]$coef[5:7] < 0)
any(all.ppms[[1]]$coef[5:7] < 0)
any(all.ppms[[1]]$coef[5:7] > 0)
neg.coefs <- lapply(all.ppms, function(x){as.numeric(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
names(ppms)
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = Dist.true.cent))
table(ppms$pos.neg)
neg.coefs <- lapply(all.ppms, function(x){any(x$coef[5:7] > 0)})
ppms$pos.neg <- neg.coefs
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = Dist.true.cent))
neg.coefs[1:10]
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
all.results <- rbind(ppms, ellips)
neg.coefs <- sapply(all.ppms, function(x){as.numeric(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
neg.coefs[1:10]
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = Dist.true.cent))
neg.coefs <- sapply(all.ppms, function(x){(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = Dist.true.cent))
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = log10(Dist.true.cent)))
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ppms$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
ellip.best
ppm.best
ellips[ellip.best,]
ppms[ppm.best, ]
ellips[ellip.best,]
ppms[ppm.best, ]
ellip.worst
ppm.worst
ellips[ellip.worst,]
ppms[ppm.worst, ]
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
ellip.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.worst,".rds"))
coef(ppm.worst.mod)
coef(ppm.best.mod)
neg.coefs <- sapply(all.ppms, function(x){(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = log10(Dist.true.cent)))
all.ppms <- lapply(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-", 1:1000,".rds"), readRDS)
neg.coefs <- sapply(all.ppms, function(x){(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
neg.coefs <- sapply(all.ppms, function(x){(any(x$coef[5:7] > 0))})
ppms$pos.neg <- neg.coefs
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = log10(Dist.true.cent)))
ggplot(ppms) + geom_boxplot(aes(x = pos.neg, y = log10(Dist.true.cent)))
ggplot(ppms) + geom_violin(aes(x = pos.neg, y = log10(Dist.true.cent))) +
geom_boxplot(aes(x = pos.neg, y = log10(Dist.true.cent)), alpha = 0.5) +
labs(x = "Positive eofficients in model", y = "log10 distance to true centroid")
ntbox::cov_center()
ntbox::cov_center
MASS::cov.rob
ntbox::ellipsoidfit
library(raster); library(ntbox); library(doParallel)
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
spp.points <- readRDS("Simulated-species/Species-presences.rds")
mahal.dists <- readRDS("Simulated-species/Mahal-dists-centroids.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
i = 1
data <- data.frame(extract(spp.layers[[i]], spp.points[[i]]))
data <- na.omit(data)
names(data) <- c("a", "b", "c")
cent <- cov_center(data, vars = c("a", "b", "c"), level = 0.99)
cent
cent$centroid
ellip <- ellipsoidfit(envlayers = spp.layers[[i]],
centroid = cent$centroid,
covar = cent$covariance,
level = 0.99,
size = 1, plot = F)
ellip
plot(ellip)
ellip$ncentedist
cov_center
MASS::cov.rob
cent$covariance
ellip$suitRaster
plot(ellip$suitRaster)
plot(p.spp[[1]])
pairs(stack(p.spp[[1]], ellip$suitRaster))
head(data)
density(data$a)
d <- density(data$a)
d$y
centroids <- apply(data, 2, function(X){
d <- density(X)
mod <- d$x[which.max(d$y)]
return(mod)
})
centroids
centroids <- apply(data, 2, function(X){
d <- density(X)
mod <- d$x[which.max(d$y)]
return(mod)
})
plot(density(data$a))
abline(v = centroids["a"])
abline(v = cent$centroid["a"])
ellip <- ellipsoidfit(envlayers = spp.layers[[i]],
centroid = centroids,
covar = cent$covariance,
level = 0.99,
size = 1, plot = F)
plot(ellip$suitRaster)
plot(p.spp[[1]])
pairs(stack(ellip$suitRaster, p.spp[[1]]))
ds <- sweep(data, 2, centroids, "-")
head(ds)
plot(density(ds$a))
plot(density(ds$a^2))
density(ds$a^2)$x
mean(ds$a^2)
var(ds$a)
sum(ds$a^2)/999
var(data$a)
sum(ds$a)
sum(ds$a^2)
sum(ds$a^2)/1000
sum(ds$a)^2/1000
sum(ds$a^2)/1000
colMeans(ds)
plot(spp.layers[[1]])
plot(p.spp[[1]])
points(spp.point[[1]])
points(spp.points[[1]])
cent <- cov.rob(data, method = "mve", nsamp = "best")
cent <- MASS :: cov.rob(data, method = "mve", nsamp = "best")
cent
cent$center
centroids
i = 1
library(raster); library(ntbox); library(doParallel)
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
ellips <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-mod-ellipses/Mod-ellips-", x, ".rds"))
})
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
spp.points <- readRDS("Simulated-species/Species-presences.rds")
p.spp <- readRDS("Simulated-species/P-presence.rds")
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
ellips <- lapply(1:1000, function(x){
readRDS(paste0("../Resultados/Analysis-centroids/Fitted-mod-ellipses/Mod-ellips-", x, ".rds"))
})
spp.layers <- lapply(1:ncol(config$layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% config$layers[, x])))})
spp.cent.cov <- readRDS("Simulated-species/Spp-cent-covs.rds")
registerDoParallel(cores = 4)
corr.p.pres <- foreach(i = seq_along(ellips)) %dopar% {
cor.test(p.spp[[i]][], ellips[[i]][[2]]$suitRaster[])
}
corr.estimates <- sapply(corr.p.pres, function(x){x$estimate})
dist.true.cents <- sapply(seq_along(ellips), function(x){
mahalanobis(ellips[[x]][[1]]$centroid, spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
boxplot(corr.estimates)
library(raster); library(ntbox); library(doParallel)
dist.true.cents <- sapply(seq_along(ellips), function(x){
mahalanobis(ellips[[x]][[1]]$centroid, spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
ellips[[1]][[1]]$center
dist.true.cents <- sapply(seq_along(ellips), function(x){
mahalanobis(ellips[[x]][[1]]$center, spp.cent.cov$centroids[[x]], spp.cent.cov$covariances[[x]])
})
boxplot(dist.true.cents)
boxplot(log10(dist.true.cents))
df.centroids <- data.frame(Corr.surf = corr.estimates, Dist.true.cent = dist.true.cents)
vars.spp <- foreach(i = seq_along(config$layer.names), .combine = rbind) %do% {
vars <- sapply(c("mean", "Log", "Beta", "Gamma"), function(x){
grep(pattern = x, config$layer.names[[i]])
})
return(sapply(vars, length))
}
vars.spp <- data.frame(vars.spp)
names(vars.spp) <- c("Normal", "Log.norm", "Beta", "Gamma")
df.results <- data.frame(df.centroids, vars.spp, approach = "Mod-ellipses")
write.csv(df.results, "Simulated-species/Results-mod-ellipses.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ppms <- read.csv("Simulated-species/Results-PPMs.csv")
ellips <- read.csv("Simulated-species/Results-ellipses.csv")
mod.ellips <- read.csv("Simulated-species/Results-mod-ellipses.csv")
all.results <- rbind(ppms, ellips, mod.ellips)
ggplot(all.results) + geom_violin(aes(x = approach, y = Corr.surf)) +
geom_boxplot(aes(x = approach, y = Corr.surf), alpha = 0.5) +
labs(x = "Approach", y = "Correlation with generating surface")
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
which.max(mod.ellips$Dist.true.cent)
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ellip.best <- which.min(ellips$Dist.true.cent)
ppm.best <- which.min(ppms$Dist.true.cent)
ellip.worst <- which.max(ellips$Dist.true.cent)
ppm.worst <- which.max(ppms$Dist.true.cent)
library(spatstat); library(ntbox)
ppm.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.best,".rds"))
ppm.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-PPMs/PPM-",ppm.worst,".rds"))
ellip.best.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-ellipses/Ellips-",ellip.best,".rds"))
ellip.worst.mod <- readRDS(paste0("../Resultados/Analysis-centroids/Fitted-mod-ellipses/Mod-ellips-",ellip.worst,".rds"))
library(raster)
config <- readRDS("Simulated-species/Sim-config-species-list.rds")
layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
lay.sum <- read.csv("Simulated-layers/Layer-summaries.csv")
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[ellip.worst]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[ellip.worst]][i]])
abline(v = ellip.worst.mod[[1]]$centroid[i], col = "red")
}
lay.gen.worst <- dropLayer(layers, which(! 1:100 %in% config$combinations[,config$sample[ellip.worst]] ))
par(mfrow = c(3, 2))
for(i in 1:3){
plot(lay.gen.worst[[i]], main = c("Log-normal", "Beta", "Gamma")[i])
density(lay.gen.worst[[i]], xlab = "Value", ylab = "Frequency")
abline(v = lay.sum$means[config$combinations[, config$sample[ellip.worst]][i]])
abline(v = ellip.worst.mod[[1]]$center[i], col = "red")
}
p.pres <- readRDS("Simulated-species/P-presence.rds")
occurs <- readRDS("Simulated-species/Species-presences.rds")
par(mfrow = c(3,1))
plot(p.pres[[ellip.worst]], main = "Generating surface")
plot(ellip.worst.mod[[2]]$suitRaster, main = "Distance to estimated centroid")
plot(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][],
xlab = "DNC", ylab = "Gen surface")
cor.test(ellip.worst.mod[[2]]$suitRaster[], p.pres[[ellip.worst]][])
ellips[106,]
mod.ellips[106,]
ggplot(all.results) + geom_point(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach), alpha = 0.1) +
geom_smooth(aes(x = log10(Dist.true.cent), y = Corr.surf, colour = approach, fill = approach), alpha = 0.5) +
labs(x = "log-Distance to true centroid", y = "Correlation with generating surface",
colour = "Approach", fill = "Approach")
ggplot(all.results) + geom_boxplot(aes(x = approach, y = log10(dist.true.cents)))
ggplot(all.results) + geom_boxplot(aes(x = approach, y = log10(dist.true.cents)))
ggplot(all.results) + geom_boxplot(aes(x = approach, y = log10(Dist.true.cents)))
ggplot(all.results) + geom_boxplot(aes(x = approach, y = log10(Dist.true.cent)))
library(raster)
all.layers <- readRDS("Simulated-layers/All-simulated-layers.rds")
l.sum <- read.csv("Simulated-layers/Layer-summaries.csv", stringsAsFactors = F)
total.combinations <- combn(x = 100, m = 3)
s <- sample(1:ncol(total.combinations), 1000)
sample.layers <- total.combinations[, s]
layer.names <- lapply(1:ncol(sample.layers), function(x){l.sum$Layer.name[sample.layers[, x]]})
species.config.list <- list(Readme = "This list containes three other objects \n
1- The total possible number of three layer combinations out of
the 100 simulated layers. \n
2- An index of the random sample of the entire number of combinations and \n
3- The matrix of combinations \n
4- The names of each layer in the combination",
combinations = total.combinations,
sample = s,
layers = sample.layers,
layer.names = layer.names)
dir.create("Simulated-species")
####
species.layers <- lapply(1:ncol(sample.layers), function(x){dropLayer(all.layers, i = c(which(! 1:nlayers(all.layers) %in% sample.layers[, x])))})
species.centroids <- lapply(1:ncol(sample.layers), function(x){l.sum$means[sample.layers[, x]]})
species.covariances <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))[, 3:5]
return(cov.rob(df, method = "mve", samp = "best", seed = 1234)$cov)})
species.covariances <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))[, 3:5]
return(MASS :: cov.rob(df, method = "mve", samp = "best", seed = 1234)$cov)})
species.covariances <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))[, 3:5]
return(MASS :: cov.rob(df, method = "mve", nsamp = "best", seed = 1234)$cov)})
warnings()
spp.cent.cov <- list(centroids = species.centroids,
covariances = species.covariances)
mahal.dists <- lapply(1:ncol(sample.layers), function(x){
df <- data.frame(rasterToPoints(species.layers[[x]]))
dist <- mahalanobis(df[, 3:5], center = species.centroids[[x]], cov = species.covariances[[x]])
dist <- round(dist, 3)
r <- rasterFromXYZ(data.frame(df[, c("x", "y")], dist))
return(r)
})
p.presence <- lapply(mahal.dists, function(x){exp(x*(-1))/(1 + exp(x*(-1)))})
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = rpois(1, rnorm(1, mean = 500, sd = 90)), prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
library(dismo)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = rpois(1, rnorm(1, mean = 500, sd = 90)), prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:25){plot(p.presence[[i]])}
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = rpois(500), prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
points <- randomPoints(mask = x, n = 500, prob = T)
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
for(i in 1:10){plot(p.presence[[i]]); points(spp.points[[i]])}
plot(species.layers[[1]])
plot(p.presence[[1]])
points(spp.points[[]])
points(spp.points[[1]])
p.presence <- lapply(mahal.dists, function(x){exp(-0.5 * x)})
spp.points <- lapply(p.presence, function(x){
points <- randomPoints(mask = x, n = 500, prob = T)
points <- t(apply(points, 1, function(x){ x + rnorm(2)}))
return(points)
})
plot(p.presence[[1]])
plot(mahal.dists[[1]])
plot(exp(species.layers[[1]][[2]]))
plot(species.layers[[1]][[2]])
plot(log(species.layers[[1]][[2]]))
plot(species.layers[[1]][[1]])
